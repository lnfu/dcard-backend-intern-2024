// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createAdvertisement = `-- name: CreateAdvertisement :execlastid
INSERT INTO advertisement (title, start_at, end_at)
VALUES (
        ?,
        ?,
        ?
    )
`

type CreateAdvertisementParams struct {
	Title   string    `json:"title"`
	StartAt time.Time `json:"start_at"`
	EndAt   time.Time `json:"end_at"`
}

func (q *Queries) CreateAdvertisement(ctx context.Context, arg CreateAdvertisementParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createAdvertisement, arg.Title, arg.StartAt, arg.EndAt)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const createAdvertisementCondition = `-- name: CreateAdvertisementCondition :exec
INSERT INTO advertisement_cond (advertisement_id, cond_id)
VALUES (
        ?,
        ?
    )
`

type CreateAdvertisementConditionParams struct {
	AdvertisementID int32 `json:"advertisement_id"`
	ConditionID     int32 `json:"condition_id"`
}

func (q *Queries) CreateAdvertisementCondition(ctx context.Context, arg CreateAdvertisementConditionParams) error {
	_, err := q.db.ExecContext(ctx, createAdvertisementCondition, arg.AdvertisementID, arg.ConditionID)
	return err
}

const createCondition = `-- name: CreateCondition :execlastid
INSERT INTO cond (age_start, age_end)
VALUES (
        ?,
        ?
    )
`

type CreateConditionParams struct {
	AgeStart sql.NullInt32 `json:"age_start"`
	AgeEnd   sql.NullInt32 `json:"age_end"`
}

func (q *Queries) CreateCondition(ctx context.Context, arg CreateConditionParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createCondition, arg.AgeStart, arg.AgeEnd)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const createConditionCountry = `-- name: CreateConditionCountry :exec
INSERT INTO cond_country (cond_id, country_id)
VALUES (
        ?,
        (
            SELECT id
            FROM country
            WHERE code = ?
        )
    )
`

type CreateConditionCountryParams struct {
	ConditionID int32  `json:"condition_id"`
	Country     string `json:"country"`
}

func (q *Queries) CreateConditionCountry(ctx context.Context, arg CreateConditionCountryParams) error {
	_, err := q.db.ExecContext(ctx, createConditionCountry, arg.ConditionID, arg.Country)
	return err
}

const createConditionGender = `-- name: CreateConditionGender :exec
INSERT INTO cond_gender (cond_id, gender_id)
VALUES (
        ?,
        (
            SELECT id
            FROM gender
            WHERE code = ?
        )
    )
`

type CreateConditionGenderParams struct {
	ConditionID int32  `json:"condition_id"`
	Gender      string `json:"gender"`
}

func (q *Queries) CreateConditionGender(ctx context.Context, arg CreateConditionGenderParams) error {
	_, err := q.db.ExecContext(ctx, createConditionGender, arg.ConditionID, arg.Gender)
	return err
}

const createConditionPlatform = `-- name: CreateConditionPlatform :exec
INSERT INTO cond_platform (cond_id, platform_id)
VALUES (
        ?,
        (
            SELECT id
            FROM platform
            WHERE name = ?
        )
    )
`

type CreateConditionPlatformParams struct {
	ConditionID int32  `json:"condition_id"`
	Platform    string `json:"platform"`
}

func (q *Queries) CreateConditionPlatform(ctx context.Context, arg CreateConditionPlatformParams) error {
	_, err := q.db.ExecContext(ctx, createConditionPlatform, arg.ConditionID, arg.Platform)
	return err
}

const getActiveAdvertisements = `-- name: GetActiveAdvertisements :many
SELECT DISTINCT adv.id,
    adv.title,
    adv.start_at,
    adv.end_at
FROM advertisement adv
    LEFT JOIN advertisement_cond adc ON adv.id = adc.advertisement_id
    LEFT JOIN cond ON adc.cond_id = cond.id
    LEFT JOIN cond_gender ON cond.id = cond_gender.cond_id
    LEFT JOIN gender ON cond_gender.gender_id = gender.id
    LEFT JOIN cond_country ON cond.id = cond_country.cond_id
    LEFT JOIN country ON cond_country.country_id = country.id
    LEFT JOIN cond_platform ON cond.id = cond_platform.cond_id
    LEFT JOIN platform ON cond_platform.platform_id = platform.id
WHERE (
        ? IS NULL
        OR (
            (
                cond.age_start IS NULL
                OR cond.age_start <= ?
            )
            AND (
                cond.age_end IS NULL
                OR cond.age_end >= ?
            )
        )
    )
    AND (
        ? IS NULL
        OR gender.code = ?
        OR cond_gender.cond_id IS NULL
    )
    AND (
        ? IS NULL
        OR country.code = ?
        OR cond_country.cond_id IS NULL
    )
    AND (
        ? IS NULL
        OR platform.name = ?
        OR cond_platform.cond_id IS NULL
    )
    OR adc.id IS NULL
ORDER BY end_at ASC
LIMIT ?, ?
`

type GetActiveAdvertisementsParams struct {
	Age      sql.NullInt32  `json:"age"`
	Gender   sql.NullString `json:"gender"`
	Country  sql.NullString `json:"country"`
	Platform sql.NullString `json:"platform"`
	Offset   int32          `json:"offset"`
	Limit    int32          `json:"limit"`
}

func (q *Queries) GetActiveAdvertisements(ctx context.Context, arg GetActiveAdvertisementsParams) ([]Advertisement, error) {
	rows, err := q.db.QueryContext(ctx, getActiveAdvertisements,
		arg.Age,
		arg.Age,
		arg.Age,
		arg.Gender,
		arg.Gender,
		arg.Country,
		arg.Country,
		arg.Platform,
		arg.Platform,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Advertisement
	for rows.Next() {
		var i Advertisement
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.StartAt,
			&i.EndAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllCountries = `-- name: GetAllCountries :many
SELECT code
FROM country
`

func (q *Queries) GetAllCountries(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getAllCountries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var code string
		if err := rows.Scan(&code); err != nil {
			return nil, err
		}
		items = append(items, code)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllGenders = `-- name: GetAllGenders :many
SELECT code
FROM gender
`

func (q *Queries) GetAllGenders(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getAllGenders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var code string
		if err := rows.Scan(&code); err != nil {
			return nil, err
		}
		items = append(items, code)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPlatforms = `-- name: GetAllPlatforms :many
SELECT name
FROM platform
`

func (q *Queries) GetAllPlatforms(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getAllPlatforms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
